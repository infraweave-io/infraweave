name: Build and Release Binaries for CLI

on:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: write

env:
  PROJECT_NAME: cli

jobs:
  build-and-release:
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - name: linux-amd64
            runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - name: macos-arm64
            runner: macos-latest
            target: aarch64-apple-darwin

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: "${{ matrix.target }}"

      - name: Setup Cache for Cargo
        uses: Swatinem/rust-cache@v2

      - name: Build Binary
        run: cargo build --verbose --locked --release --target ${{ matrix.target }}

      - name: Prepare Binary for Release
        shell: bash
        run: |
          BIN_SUFFIX=""
          if [[ "${{ matrix.runner }}" == "windows-latest" ]]; then
            BIN_SUFFIX=".exe"
          fi

          # The built binary output location
          BIN_OUTPUT="target/${{ matrix.target }}/release/${PROJECT_NAME}${BIN_SUFFIX}"

          # Define a better name for the final binary
          BIN_RELEASE="${PROJECT_NAME}-${{ matrix.name }}${BIN_SUFFIX}"

          # Ensure the destination directory exists
          mkdir -p "./cli-releases"

          # Move the built binary to the destination
          if [[ -f "$BIN_OUTPUT" ]]; then
            mv "$BIN_OUTPUT" "./cli-releases/cli-${{ matrix.name }}"
          else
            echo "Error: Built binary not found at $BIN_OUTPUT" && exit 1
          fi

      - name: Upload Binary as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: CLI-Binaries-${{ matrix.name }}
          path: ./cli-releases/${PROJECT_NAME}-${{ matrix.name }}

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./cli-releases/${PROJECT_NAME}-${{ matrix.name }}
          asset_name: ${PROJECT_NAME}-${{ matrix.name }}
          asset_content_type: application/octet-stream
