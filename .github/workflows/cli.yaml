name: Build and Release Binaries for CLI

on:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: write

env:
  PROJECT_NAME: cli

jobs:
  build:
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - name: linux-amd64
            runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - name: macos-arm64
            runner: macos-latest
            target: aarch64-apple-darwin

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: "${{ matrix.target }}"

      - name: Setup Cache for Cargo
        uses: Swatinem/rust-cache@v2

      - name: Build Binary
        run: cargo build -p ${PROJECT_NAME} --verbose --locked --release --target ${{ matrix.target }}

      - name: Prepare Binary for Release
        shell: bash
        run: |
          BIN_SUFFIX=""
          if [[ "${{ matrix.runner }}" == "windows-latest" ]]; then
            BIN_SUFFIX=".exe"
          fi

          BIN_OUTPUT="target/${{ matrix.target }}/release/${PROJECT_NAME}${BIN_SUFFIX}"
          BIN_RELEASE="cli-${{ matrix.name }}${BIN_SUFFIX}"

          mkdir -p "./cli-releases"

          if [[ -f "$BIN_OUTPUT" ]]; then
            mv "$BIN_OUTPUT" "./cli-releases/$BIN_RELEASE"
          else
            echo "Error: Built binary not found at $BIN_OUTPUT" && exit 1
          fi

      - name: Upload Binary as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: cli-${{ matrix.name }}
          path: ./cli-releases/cli-${{ matrix.name }}*

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Download All Artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./cli-releases

      - name: Create GitHub Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          files: ./cli-releases/** # Upload all binaries as release assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
